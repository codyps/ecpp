= ecpp: an extended C preprocessor =

Goals:
 - support all c11 standard preprocessor bits
 - gnu and other extentions (pragma once, include_next)
 - support gnu cpp style arguments (-isystem, -I, -D, -include)
 - environment
   - CPATH
   - C_INCLUDE_PATH
   - CPLUS_INCLUDE_PATH
   - DEPENDENCIES_OUTPUT
   - SUNPRO_DEPENDENCIES

       cpp [-Dmacro[=defn]...] [-Umacro]
           [-Idir...] [-iquotedir...]
           [-Wwarn...]
           [-M|-MM] [-MG] [-MF filename]
           [-MP] [-MQ target...]
           [-MT target...]
           [-P] [-fno-working-directory]
           [-x language] [-std=standard]
           infile outfile

Preprocessor directives:
	#if <dir-if>
	#else
	#endif
	#ifdef <macro-name>
	#ifndef <macro-name>
	#elif <dir-if>
	#include <string>
	#define <macro-decl> <macro-text>
	#undef <macro-name>

Typical Extentions:
	#include_next <string>
	#pragma once

Proprocessor builtins:
	defined(<macro name>)

	/* Do we need to recognize this? */
	_Pragma(<pragma contents>)

New Extentons:

	#once
	 works exactly like "#pragma once" but will cause pp that are
	 unsuported a warning will be emitted.

        #quote-arg <macro-name> <arg-name>
	 Need a '#define x(y) z' which causes 'x(u)' to evaluate x(u) before evaluating 'u'

	_Eval(<text>)
	 causes text to be evaluated as if it were present in the source file.
	 Allows dynamic '#define' creation.
	_Quote(<text>)
	 prevents evaluation of macros in the text enclused until _Unqoute() is
	 called on the text.
	_Unqoute()
	 see definition for _Quoute()

   /* String operations
    * FIXME: allow generic definition of these
    * "split" ??
    */
        _DeclToName()
	_ToUpper()
	_ToLower()

Extented CPP lib:

   /* define(<macro-decl>[ <macro-text>]) */
   #define define(a)	_Eval(#define a)

   /* redefine(<macro-def>) */
   #define redefine(a) _EvalDir(undef def_to_name(a)) _EvalDir(define a)


Issues:
 - predefined macros are bad news
